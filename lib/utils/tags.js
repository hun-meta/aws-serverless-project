"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTaggingHelper = exports.TaggingHelper = void 0;
const cdk = require("aws-cdk-lib");
const constants_1 = require("./constants");
class TaggingHelper {
    constructor(config) {
        this.config = config;
    }
    applyTags(construct, additionalTags) {
        const tags = {
            Environment: this.config.environment,
            Project: this.config.projectName,
            ...(this.config.costCenter && { CostCenter: this.config.costCenter }),
            ...(this.config.owner && { Owner: this.config.owner }),
            ...(this.config.team && { Team: this.config.team }),
            ...(this.config.purpose && { Purpose: this.config.purpose }),
            ...additionalTags
        };
        Object.entries(tags).forEach(([key, value]) => {
            cdk.Tags.of(construct).add(key, value);
        });
    }
    getCommonTags() {
        return {
            Environment: this.config.environment,
            Project: this.config.projectName,
            ...(this.config.costCenter && { CostCenter: this.config.costCenter }),
            ...(this.config.owner && { Owner: this.config.owner }),
            ...(this.config.team && { Team: this.config.team })
        };
    }
}
exports.TaggingHelper = TaggingHelper;
function createTaggingHelper(environment) {
    return new TaggingHelper({
        environment,
        projectName: constants_1.PROJECT_NAME,
        costCenter: 'Development',
        owner: 'DevOps Team',
        team: 'Backend'
    });
}
exports.createTaggingHelper = createTaggingHelper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRhZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBRW5DLDJDQUEyQztBQVczQyxNQUFhLGFBQWE7SUFHeEIsWUFBWSxNQUFxQjtRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsU0FBUyxDQUFDLFNBQW9CLEVBQUUsY0FBdUM7UUFDckUsTUFBTSxJQUFJLEdBQUc7WUFDWCxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXO1lBQ3BDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7WUFDaEMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDckUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDdEQsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkQsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDNUQsR0FBRyxjQUFjO1NBQ2xCLENBQUM7UUFFRixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDNUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTztZQUNMLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7WUFDcEMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVztZQUNoQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNyRSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN0RCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNwRCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBaENELHNDQWdDQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLFdBQW1CO0lBQ3JELE9BQU8sSUFBSSxhQUFhLENBQUM7UUFDdkIsV0FBVztRQUNYLFdBQVcsRUFBRSx3QkFBWTtRQUN6QixVQUFVLEVBQUUsYUFBYTtRQUN6QixLQUFLLEVBQUUsYUFBYTtRQUNwQixJQUFJLEVBQUUsU0FBUztLQUNoQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBUkQsa0RBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBQUk9KRUNUX05BTUUgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnZ2luZ0NvbmZpZyB7XG4gIHJlYWRvbmx5IGVudmlyb25tZW50OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb2plY3ROYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGNvc3RDZW50ZXI/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IG93bmVyPzogc3RyaW5nO1xuICByZWFkb25seSB0ZWFtPzogc3RyaW5nO1xuICByZWFkb25seSBwdXJwb3NlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVGFnZ2luZ0hlbHBlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBUYWdnaW5nQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogVGFnZ2luZ0NvbmZpZykge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG5cbiAgYXBwbHlUYWdzKGNvbnN0cnVjdDogQ29uc3RydWN0LCBhZGRpdGlvbmFsVGFncz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiB2b2lkIHtcbiAgICBjb25zdCB0YWdzID0ge1xuICAgICAgRW52aXJvbm1lbnQ6IHRoaXMuY29uZmlnLmVudmlyb25tZW50LFxuICAgICAgUHJvamVjdDogdGhpcy5jb25maWcucHJvamVjdE5hbWUsXG4gICAgICAuLi4odGhpcy5jb25maWcuY29zdENlbnRlciAmJiB7IENvc3RDZW50ZXI6IHRoaXMuY29uZmlnLmNvc3RDZW50ZXIgfSksXG4gICAgICAuLi4odGhpcy5jb25maWcub3duZXIgJiYgeyBPd25lcjogdGhpcy5jb25maWcub3duZXIgfSksXG4gICAgICAuLi4odGhpcy5jb25maWcudGVhbSAmJiB7IFRlYW06IHRoaXMuY29uZmlnLnRlYW0gfSksXG4gICAgICAuLi4odGhpcy5jb25maWcucHVycG9zZSAmJiB7IFB1cnBvc2U6IHRoaXMuY29uZmlnLnB1cnBvc2UgfSksXG4gICAgICAuLi5hZGRpdGlvbmFsVGFnc1xuICAgIH07XG5cbiAgICBPYmplY3QuZW50cmllcyh0YWdzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGNkay5UYWdzLm9mKGNvbnN0cnVjdCkuYWRkKGtleSwgdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q29tbW9uVGFncygpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgICByZXR1cm4ge1xuICAgICAgRW52aXJvbm1lbnQ6IHRoaXMuY29uZmlnLmVudmlyb25tZW50LFxuICAgICAgUHJvamVjdDogdGhpcy5jb25maWcucHJvamVjdE5hbWUsXG4gICAgICAuLi4odGhpcy5jb25maWcuY29zdENlbnRlciAmJiB7IENvc3RDZW50ZXI6IHRoaXMuY29uZmlnLmNvc3RDZW50ZXIgfSksXG4gICAgICAuLi4odGhpcy5jb25maWcub3duZXIgJiYgeyBPd25lcjogdGhpcy5jb25maWcub3duZXIgfSksXG4gICAgICAuLi4odGhpcy5jb25maWcudGVhbSAmJiB7IFRlYW06IHRoaXMuY29uZmlnLnRlYW0gfSlcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYWdnaW5nSGVscGVyKGVudmlyb25tZW50OiBzdHJpbmcpOiBUYWdnaW5nSGVscGVyIHtcbiAgcmV0dXJuIG5ldyBUYWdnaW5nSGVscGVyKHtcbiAgICBlbnZpcm9ubWVudCxcbiAgICBwcm9qZWN0TmFtZTogUFJPSkVDVF9OQU1FLFxuICAgIGNvc3RDZW50ZXI6ICdEZXZlbG9wbWVudCcsXG4gICAgb3duZXI6ICdEZXZPcHMgVGVhbScsXG4gICAgdGVhbTogJ0JhY2tlbmQnXG4gIH0pO1xufSJdfQ==