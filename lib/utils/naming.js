"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamingHelper = void 0;
const constants_1 = require("./constants");
class NamingHelper {
    constructor(stage) {
        this.stage = stage;
        this.prefix = stage === 'prod' ? 'Prod' : 'Dev';
    }
    getResourceName(resource) {
        return `${this.prefix}${resource}`;
    }
    getStackName(stackName) {
        return `${constants_1.PROJECT_PREFIX}${this.prefix}${stackName}`;
    }
    getLogicalId(resource) {
        return `${this.prefix}${resource}`;
    }
    getPhysicalName(resource) {
        return `${this.stage}-${resource.toLowerCase()}`;
    }
    getSecurityGroupName(sgName) {
        return `${this.stage}-${sgName.toLowerCase()}`;
    }
    getKeyPairName() {
        return `${this.stage}-ec2-key`;
    }
    getDatabaseName(dbName = 'main') {
        return `${this.stage}-${dbName}-db`;
    }
    getLambdaFunctionName(functionName) {
        return `${this.stage}-${functionName}-function`;
    }
    getS3BucketName(bucketName) {
        return `${this.stage}-${bucketName}-bucket`;
    }
    getApiGatewayName() {
        return `${this.stage}-api-gateway`;
    }
    getVpcName() {
        return `${this.stage}-vpc`;
    }
    getSubnetName(subnetType, az) {
        return `${this.stage}-${subnetType.toLowerCase()}-subnet-${az}`;
    }
    getRouteTableName(type) {
        return `${this.stage}-${type.toLowerCase()}-rt`;
    }
    getInternetGatewayName() {
        return `${this.stage}-igw`;
    }
    getNatGatewayName(az) {
        return `${this.stage}-nat-gw-${az}`;
    }
    getElasticIpName(purpose) {
        return `${this.stage}-eip-${purpose}`;
    }
    getIamRoleName(roleName) {
        return `${this.prefix}${roleName}`;
    }
    getIamPolicyName(policyName) {
        return `${this.prefix}${policyName}`;
    }
}
exports.NamingHelper = NamingHelper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmFtaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUE2QztBQUU3QyxNQUFhLFlBQVk7SUFJdkIsWUFBWSxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDbEQsQ0FBQztJQUVELGVBQWUsQ0FBQyxRQUFnQjtRQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsWUFBWSxDQUFDLFNBQWlCO1FBQzVCLE9BQU8sR0FBRywwQkFBYyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQUVELFlBQVksQ0FBQyxRQUFnQjtRQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsZUFBZSxDQUFDLFFBQWdCO1FBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxNQUFjO1FBQ2pDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFRCxjQUFjO1FBQ1osT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLFVBQVUsQ0FBQztJQUNqQyxDQUFDO0lBRUQsZUFBZSxDQUFDLFNBQWlCLE1BQU07UUFDckMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksTUFBTSxLQUFLLENBQUM7SUFDdEMsQ0FBQztJQUVELHFCQUFxQixDQUFDLFlBQW9CO1FBQ3hDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLFlBQVksV0FBVyxDQUFDO0lBQ2xELENBQUM7SUFFRCxlQUFlLENBQUMsVUFBa0I7UUFDaEMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksVUFBVSxTQUFTLENBQUM7SUFDOUMsQ0FBQztJQUVELGlCQUFpQjtRQUNmLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxjQUFjLENBQUM7SUFDckMsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFFRCxhQUFhLENBQUMsVUFBa0IsRUFBRSxFQUFVO1FBQzFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQztJQUNsRSxDQUFDO0lBRUQsaUJBQWlCLENBQUMsSUFBWTtRQUM1QixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQztJQUNsRCxDQUFDO0lBRUQsc0JBQXNCO1FBQ3BCLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxNQUFNLENBQUM7SUFDN0IsQ0FBQztJQUVELGlCQUFpQixDQUFDLEVBQVU7UUFDMUIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLFdBQVcsRUFBRSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELGdCQUFnQixDQUFDLE9BQWU7UUFDOUIsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLFFBQVEsT0FBTyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELGNBQWMsQ0FBQyxRQUFnQjtRQUM3QixPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsVUFBa0I7UUFDakMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxFQUFFLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBaEZELG9DQWdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBST0pFQ1RfUFJFRklYIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgY2xhc3MgTmFtaW5nSGVscGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdGFnZTogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IHByZWZpeDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHN0YWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN0YWdlID0gc3RhZ2U7XG4gICAgdGhpcy5wcmVmaXggPSBzdGFnZSA9PT0gJ3Byb2QnID8gJ1Byb2QnIDogJ0Rldic7XG4gIH1cblxuICBnZXRSZXNvdXJjZU5hbWUocmVzb3VyY2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMucHJlZml4fSR7cmVzb3VyY2V9YDtcbiAgfVxuXG4gIGdldFN0YWNrTmFtZShzdGFja05hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke1BST0pFQ1RfUFJFRklYfSR7dGhpcy5wcmVmaXh9JHtzdGFja05hbWV9YDtcbiAgfVxuXG4gIGdldExvZ2ljYWxJZChyZXNvdXJjZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5wcmVmaXh9JHtyZXNvdXJjZX1gO1xuICB9XG5cbiAgZ2V0UGh5c2ljYWxOYW1lKHJlc291cmNlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnN0YWdlfS0ke3Jlc291cmNlLnRvTG93ZXJDYXNlKCl9YDtcbiAgfVxuXG4gIGdldFNlY3VyaXR5R3JvdXBOYW1lKHNnTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5zdGFnZX0tJHtzZ05hbWUudG9Mb3dlckNhc2UoKX1gO1xuICB9XG5cbiAgZ2V0S2V5UGFpck5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5zdGFnZX0tZWMyLWtleWA7XG4gIH1cblxuICBnZXREYXRhYmFzZU5hbWUoZGJOYW1lOiBzdHJpbmcgPSAnbWFpbicpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnN0YWdlfS0ke2RiTmFtZX0tZGJgO1xuICB9XG5cbiAgZ2V0TGFtYmRhRnVuY3Rpb25OYW1lKGZ1bmN0aW9uTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5zdGFnZX0tJHtmdW5jdGlvbk5hbWV9LWZ1bmN0aW9uYDtcbiAgfVxuXG4gIGdldFMzQnVja2V0TmFtZShidWNrZXROYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnN0YWdlfS0ke2J1Y2tldE5hbWV9LWJ1Y2tldGA7XG4gIH1cblxuICBnZXRBcGlHYXRld2F5TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnN0YWdlfS1hcGktZ2F0ZXdheWA7XG4gIH1cblxuICBnZXRWcGNOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuc3RhZ2V9LXZwY2A7XG4gIH1cblxuICBnZXRTdWJuZXROYW1lKHN1Ym5ldFR5cGU6IHN0cmluZywgYXo6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuc3RhZ2V9LSR7c3VibmV0VHlwZS50b0xvd2VyQ2FzZSgpfS1zdWJuZXQtJHthen1gO1xuICB9XG5cbiAgZ2V0Um91dGVUYWJsZU5hbWUodHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5zdGFnZX0tJHt0eXBlLnRvTG93ZXJDYXNlKCl9LXJ0YDtcbiAgfVxuXG4gIGdldEludGVybmV0R2F0ZXdheU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5zdGFnZX0taWd3YDtcbiAgfVxuXG4gIGdldE5hdEdhdGV3YXlOYW1lKGF6OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnN0YWdlfS1uYXQtZ3ctJHthen1gO1xuICB9XG5cbiAgZ2V0RWxhc3RpY0lwTmFtZShwdXJwb3NlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnN0YWdlfS1laXAtJHtwdXJwb3NlfWA7XG4gIH1cblxuICBnZXRJYW1Sb2xlTmFtZShyb2xlTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5wcmVmaXh9JHtyb2xlTmFtZX1gO1xuICB9XG5cbiAgZ2V0SWFtUG9saWN5TmFtZShwb2xpY3lOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnByZWZpeH0ke3BvbGljeU5hbWV9YDtcbiAgfVxufSJdfQ==