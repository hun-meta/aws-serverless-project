"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnvironmentConfig = void 0;
function getEnvironmentConfig(app) {
    const stage = app.node.tryGetContext('env') || 'dev';
    const isProd = stage === 'prod';
    const isDev = stage === 'dev';
    // Get environment from context
    const environments = app.node.tryGetContext('environments') || {};
    const env = environments[stage] || { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION };
    if (!env.account || !env.region) {
        throw new Error(`Environment configuration not found for stage: ${stage}`);
    }
    return {
        environment: env,
        stage,
        isProd,
        isDev,
        vpc: {
            cidr: isProd ? '10.0.0.0/16' : '10.1.0.0/16',
            maxAzs: 2,
            natGateways: isProd ? 1 : 0,
            natInstances: isProd ? 0 : 1
        },
        database: {
            minCapacity: isProd ? 0.5 : 0,
            maxCapacity: isProd ? 4 : 0.5,
            backupRetentionDays: isProd ? 7 : 1,
            deletionProtection: isProd
        },
        lambda: {
            memorySize: 512,
            timeout: 15,
            runtime: 'nodejs18.x'
        },
        ec2: {
            instanceType: isProd ? 't4g.nano' : 't2.micro',
            keyName: isProd ? 'prod-ec2-key' : 'dev-ec2-key',
            enableNatInstance: !isProd
        },
        s3: {
            publicAccessBlocked: true,
            versioning: true,
            encryption: true
        }
    };
}
exports.getEnvironmentConfig = getEnvironmentConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlbnZpcm9ubWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFtREEsU0FBZ0Isb0JBQW9CLENBQUMsR0FBWTtJQUMvQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUM7SUFDckQsTUFBTSxNQUFNLEdBQUcsS0FBSyxLQUFLLE1BQU0sQ0FBQztJQUNoQyxNQUFNLEtBQUssR0FBRyxLQUFLLEtBQUssS0FBSyxDQUFDO0lBRTlCLCtCQUErQjtJQUMvQixNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEUsTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUV4SCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7UUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxrREFBa0QsS0FBSyxFQUFFLENBQUMsQ0FBQztLQUM1RTtJQUVELE9BQU87UUFDTCxXQUFXLEVBQUUsR0FBRztRQUNoQixLQUFLO1FBQ0wsTUFBTTtRQUNOLEtBQUs7UUFDTCxHQUFHLEVBQUU7WUFDSCxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWE7WUFDNUMsTUFBTSxFQUFFLENBQUM7WUFDVCxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRztZQUM3QixtQkFBbUIsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxrQkFBa0IsRUFBRSxNQUFNO1NBQzNCO1FBQ0QsTUFBTSxFQUFFO1lBQ04sVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsRUFBRTtZQUNYLE9BQU8sRUFBRSxZQUFZO1NBQ3RCO1FBQ0QsR0FBRyxFQUFFO1lBQ0gsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVO1lBQzlDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsYUFBYTtZQUNoRCxpQkFBaUIsRUFBRSxDQUFDLE1BQU07U0FDM0I7UUFDRCxFQUFFLEVBQUU7WUFDRixtQkFBbUIsRUFBRSxJQUFJO1lBQ3pCLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFVBQVUsRUFBRSxJQUFJO1NBQ2pCO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUE5Q0Qsb0RBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcblxuZXhwb3J0IGludGVyZmFjZSBFbnZpcm9ubWVudCB7XG4gIHJlYWRvbmx5IGFjY291bnQ6IHN0cmluZztcbiAgcmVhZG9ubHkgcmVnaW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW52aXJvbm1lbnRDb25maWcge1xuICByZWFkb25seSBlbnZpcm9ubWVudDogRW52aXJvbm1lbnQ7XG4gIHJlYWRvbmx5IHN0YWdlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGlzUHJvZDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgaXNEZXY6IGJvb2xlYW47XG4gIHJlYWRvbmx5IHZwYzogVnBjQ29uZmlnO1xuICByZWFkb25seSBkYXRhYmFzZTogRGF0YWJhc2VDb25maWc7XG4gIHJlYWRvbmx5IGxhbWJkYTogTGFtYmRhQ29uZmlnO1xuICByZWFkb25seSBlYzI6IEVjMkNvbmZpZztcbiAgcmVhZG9ubHkgczM6IFMzQ29uZmlnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZwY0NvbmZpZyB7XG4gIHJlYWRvbmx5IGNpZHI6IHN0cmluZztcbiAgcmVhZG9ubHkgbWF4QXpzOiBudW1iZXI7XG4gIHJlYWRvbmx5IG5hdEdhdGV3YXlzOiBudW1iZXI7XG4gIHJlYWRvbmx5IG5hdEluc3RhbmNlczogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlQ29uZmlnIHtcbiAgcmVhZG9ubHkgbWluQ2FwYWNpdHk6IG51bWJlcjtcbiAgcmVhZG9ubHkgbWF4Q2FwYWNpdHk6IG51bWJlcjtcbiAgcmVhZG9ubHkgYmFja3VwUmV0ZW50aW9uRGF5czogbnVtYmVyO1xuICByZWFkb25seSBkZWxldGlvblByb3RlY3Rpb246IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFtYmRhQ29uZmlnIHtcbiAgcmVhZG9ubHkgbWVtb3J5U2l6ZTogbnVtYmVyO1xuICByZWFkb25seSB0aW1lb3V0OiBudW1iZXI7XG4gIHJlYWRvbmx5IHJ1bnRpbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFYzJDb25maWcge1xuICByZWFkb25seSBpbnN0YW5jZVR5cGU6IHN0cmluZztcbiAgcmVhZG9ubHkga2V5TmFtZTogc3RyaW5nO1xuICByZWFkb25seSBlbmFibGVOYXRJbnN0YW5jZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTM0NvbmZpZyB7XG4gIHJlYWRvbmx5IHB1YmxpY0FjY2Vzc0Jsb2NrZWQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IHZlcnNpb25pbmc6IGJvb2xlYW47XG4gIHJlYWRvbmx5IGVuY3J5cHRpb246IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbnZpcm9ubWVudENvbmZpZyhhcHA6IGNkay5BcHApOiBFbnZpcm9ubWVudENvbmZpZyB7XG4gIGNvbnN0IHN0YWdlID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW52JykgfHwgJ2Rldic7XG4gIGNvbnN0IGlzUHJvZCA9IHN0YWdlID09PSAncHJvZCc7XG4gIGNvbnN0IGlzRGV2ID0gc3RhZ2UgPT09ICdkZXYnO1xuXG4gIC8vIEdldCBlbnZpcm9ubWVudCBmcm9tIGNvbnRleHRcbiAgY29uc3QgZW52aXJvbm1lbnRzID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW52aXJvbm1lbnRzJykgfHwge307XG4gIGNvbnN0IGVudiA9IGVudmlyb25tZW50c1tzdGFnZV0gfHwgeyBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULCByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB9O1xuXG4gIGlmICghZW52LmFjY291bnQgfHwgIWVudi5yZWdpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVudmlyb25tZW50IGNvbmZpZ3VyYXRpb24gbm90IGZvdW5kIGZvciBzdGFnZTogJHtzdGFnZX1gKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZW52aXJvbm1lbnQ6IGVudixcbiAgICBzdGFnZSxcbiAgICBpc1Byb2QsXG4gICAgaXNEZXYsXG4gICAgdnBjOiB7XG4gICAgICBjaWRyOiBpc1Byb2QgPyAnMTAuMC4wLjAvMTYnIDogJzEwLjEuMC4wLzE2JyxcbiAgICAgIG1heEF6czogMixcbiAgICAgIG5hdEdhdGV3YXlzOiBpc1Byb2QgPyAxIDogMCxcbiAgICAgIG5hdEluc3RhbmNlczogaXNQcm9kID8gMCA6IDFcbiAgICB9LFxuICAgIGRhdGFiYXNlOiB7XG4gICAgICBtaW5DYXBhY2l0eTogaXNQcm9kID8gMC41IDogMCxcbiAgICAgIG1heENhcGFjaXR5OiBpc1Byb2QgPyA0IDogMC41LFxuICAgICAgYmFja3VwUmV0ZW50aW9uRGF5czogaXNQcm9kID8gNyA6IDEsXG4gICAgICBkZWxldGlvblByb3RlY3Rpb246IGlzUHJvZFxuICAgIH0sXG4gICAgbGFtYmRhOiB7XG4gICAgICBtZW1vcnlTaXplOiA1MTIsXG4gICAgICB0aW1lb3V0OiAxNSxcbiAgICAgIHJ1bnRpbWU6ICdub2RlanMxOC54J1xuICAgIH0sXG4gICAgZWMyOiB7XG4gICAgICBpbnN0YW5jZVR5cGU6IGlzUHJvZCA/ICd0NGcubmFubycgOiAndDIubWljcm8nLFxuICAgICAga2V5TmFtZTogaXNQcm9kID8gJ3Byb2QtZWMyLWtleScgOiAnZGV2LWVjMi1rZXknLFxuICAgICAgZW5hYmxlTmF0SW5zdGFuY2U6ICFpc1Byb2RcbiAgICB9LFxuICAgIHMzOiB7XG4gICAgICBwdWJsaWNBY2Nlc3NCbG9ja2VkOiB0cnVlLFxuICAgICAgdmVyc2lvbmluZzogdHJ1ZSxcbiAgICAgIGVuY3J5cHRpb246IHRydWVcbiAgICB9XG4gIH07XG59Il19