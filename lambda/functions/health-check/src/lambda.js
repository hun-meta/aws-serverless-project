"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const health_check_service_1 = require("./service/health-check.service");
const health_check_request_dto_1 = require("./dto/health-check-request.dto");
const lambda_common_1 = require("@hun_meta/lambda-common");
const logger_service_1 = require("./service/logger.service");
const CONTEXT = 'HealthCheckLambda';
const healthCheckService = health_check_service_1.HealthCheckService.getInstance();
const handler = async (event, context) => {
    try {
        logger_service_1.default.info(CONTEXT, 'Health check request received', {
            requestId: context.awsRequestId,
            httpMethod: event.httpMethod,
            path: event.path
        });
        // Parse request body
        const requestBody = event.body ? JSON.parse(event.body) : {};
        const requestDto = new health_check_request_dto_1.HealthCheckRequestDto(requestBody.requestTimestamp || Date.now());
        // Process health check
        const responseDto = await healthCheckService.healthCheck(requestDto);
        // Return success response
        const response = lambda_common_1.ResponseHandler.success(responseDto, 'Health check completed successfully');
        logger_service_1.default.info(CONTEXT, 'Health check completed', {
            requestId: context.awsRequestId,
            status: 'success',
            healthy: responseDto.isHealthy
        });
        return response;
    }
    catch (error) {
        logger_service_1.default.error(CONTEXT, 'Health check failed', {
            requestId: context.awsRequestId,
            error: error.message,
            stack: error.stack
        });
        return lambda_common_1.ResponseHandler.error(error, 'Health check failed');
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHlFQUFvRTtBQUNwRSw2RUFBdUU7QUFFdkUsMkRBQTBEO0FBQzFELDZEQUFxRDtBQUVyRCxNQUFNLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQztBQUNwQyxNQUFNLGtCQUFrQixHQUFHLHlDQUFrQixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRXJELE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUEyQixFQUFFLE9BQWdCLEVBQWtDLEVBQUU7SUFDN0csSUFBSTtRQUNGLHdCQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSwrQkFBK0IsRUFBRTtZQUMzRCxTQUFTLEVBQUUsT0FBTyxDQUFDLFlBQVk7WUFDL0IsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFFSCxxQkFBcUI7UUFDckIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUM3RCxNQUFNLFVBQVUsR0FBRyxJQUFJLGdEQUFxQixDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV6Rix1QkFBdUI7UUFDdkIsTUFBTSxXQUFXLEdBQTJCLE1BQU0sa0JBQWtCLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTdGLDBCQUEwQjtRQUMxQixNQUFNLFFBQVEsR0FBRywrQkFBZSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUscUNBQXFDLENBQUMsQ0FBQztRQUU3Rix3QkFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUU7WUFDcEQsU0FBUyxFQUFFLE9BQU8sQ0FBQyxZQUFZO1lBQy9CLE1BQU0sRUFBRSxTQUFTO1lBQ2pCLE9BQU8sRUFBRSxXQUFXLENBQUMsU0FBUztTQUMvQixDQUFDLENBQUM7UUFFSCxPQUFPLFFBQVEsQ0FBQztLQUVqQjtJQUFDLE9BQU8sS0FBVSxFQUFFO1FBQ25CLHdCQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRTtZQUNsRCxTQUFTLEVBQUUsT0FBTyxDQUFDLFlBQVk7WUFDL0IsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3BCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztTQUNuQixDQUFDLENBQUM7UUFFSCxPQUFPLCtCQUFlLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0tBQzVEO0FBQ0gsQ0FBQyxDQUFDO0FBbkNXLFFBQUEsT0FBTyxXQW1DbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCwgQVBJR2F0ZXdheVByb3h5UmVzdWx0LCBDb250ZXh0IH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgeyBIZWFsdGhDaGVja1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvaGVhbHRoLWNoZWNrLnNlcnZpY2UnO1xuaW1wb3J0IHsgSGVhbHRoQ2hlY2tSZXF1ZXN0RHRvIH0gZnJvbSAnLi9kdG8vaGVhbHRoLWNoZWNrLXJlcXVlc3QuZHRvJztcbmltcG9ydCB7IEhlYWx0aENoZWNrUmVzcG9uc2VEdG8gfSBmcm9tICcuL2R0by9oZWFsdGgtY2hlY2stcmVzcG9uc2UuZHRvJztcbmltcG9ydCB7IFJlc3BvbnNlSGFuZGxlciB9IGZyb20gJ0BodW5fbWV0YS9sYW1iZGEtY29tbW9uJztcbmltcG9ydCBsb2dnZXJTZXJ2aWNlIGZyb20gJy4vc2VydmljZS9sb2dnZXIuc2VydmljZSc7XG5cbmNvbnN0IENPTlRFWFQgPSAnSGVhbHRoQ2hlY2tMYW1iZGEnO1xuY29uc3QgaGVhbHRoQ2hlY2tTZXJ2aWNlID0gSGVhbHRoQ2hlY2tTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCwgY29udGV4dDogQ29udGV4dCk6IFByb21pc2U8QVBJR2F0ZXdheVByb3h5UmVzdWx0PiA9PiB7XG4gIHRyeSB7XG4gICAgbG9nZ2VyU2VydmljZS5pbmZvKENPTlRFWFQsICdIZWFsdGggY2hlY2sgcmVxdWVzdCByZWNlaXZlZCcsIHtcbiAgICAgIHJlcXVlc3RJZDogY29udGV4dC5hd3NSZXF1ZXN0SWQsXG4gICAgICBodHRwTWV0aG9kOiBldmVudC5odHRwTWV0aG9kLFxuICAgICAgcGF0aDogZXZlbnQucGF0aFxuICAgIH0pO1xuXG4gICAgLy8gUGFyc2UgcmVxdWVzdCBib2R5XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSBldmVudC5ib2R5ID8gSlNPTi5wYXJzZShldmVudC5ib2R5KSA6IHt9O1xuICAgIGNvbnN0IHJlcXVlc3REdG8gPSBuZXcgSGVhbHRoQ2hlY2tSZXF1ZXN0RHRvKHJlcXVlc3RCb2R5LnJlcXVlc3RUaW1lc3RhbXAgfHwgRGF0ZS5ub3coKSk7XG5cbiAgICAvLyBQcm9jZXNzIGhlYWx0aCBjaGVja1xuICAgIGNvbnN0IHJlc3BvbnNlRHRvOiBIZWFsdGhDaGVja1Jlc3BvbnNlRHRvID0gYXdhaXQgaGVhbHRoQ2hlY2tTZXJ2aWNlLmhlYWx0aENoZWNrKHJlcXVlc3REdG8pO1xuXG4gICAgLy8gUmV0dXJuIHN1Y2Nlc3MgcmVzcG9uc2VcbiAgICBjb25zdCByZXNwb25zZSA9IFJlc3BvbnNlSGFuZGxlci5zdWNjZXNzKHJlc3BvbnNlRHRvLCAnSGVhbHRoIGNoZWNrIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknKTtcbiAgICBcbiAgICBsb2dnZXJTZXJ2aWNlLmluZm8oQ09OVEVYVCwgJ0hlYWx0aCBjaGVjayBjb21wbGV0ZWQnLCB7XG4gICAgICByZXF1ZXN0SWQ6IGNvbnRleHQuYXdzUmVxdWVzdElkLFxuICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICBoZWFsdGh5OiByZXNwb25zZUR0by5pc0hlYWx0aHlcbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZTtcblxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgbG9nZ2VyU2VydmljZS5lcnJvcihDT05URVhULCAnSGVhbHRoIGNoZWNrIGZhaWxlZCcsIHtcbiAgICAgIHJlcXVlc3RJZDogY29udGV4dC5hd3NSZXF1ZXN0SWQsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIHN0YWNrOiBlcnJvci5zdGFja1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFJlc3BvbnNlSGFuZGxlci5lcnJvcihlcnJvciwgJ0hlYWx0aCBjaGVjayBmYWlsZWQnKTtcbiAgfVxufTsiXX0=