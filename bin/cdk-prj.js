#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const environment_1 = require("../lib/utils/environment");
const naming_1 = require("../lib/utils/naming");
const tags_1 = require("../lib/utils/tags");
const constants_1 = require("../lib/utils/constants");
// Import all stacks
const iam_stack_1 = require("../lib/stacks/iam-stack");
const vpc_stack_1 = require("../lib/stacks/vpc-stack");
const security_group_stack_1 = require("../lib/stacks/security-group-stack");
const s3_stack_1 = require("../lib/stacks/s3-stack");
const database_stack_1 = require("../lib/stacks/database-stack");
const ec2_stack_1 = require("../lib/stacks/ec2-stack");
const lambda_stack_1 = require("../lib/stacks/lambda-stack");
const api_gateway_stack_1 = require("../lib/stacks/api-gateway-stack");
const app = new cdk.App();
// Get environment configuration
const config = (0, environment_1.getEnvironmentConfig)(app);
const namingHelper = new naming_1.NamingHelper(config.stage);
const taggingHelper = (0, tags_1.createTaggingHelper)(config.stage);
console.log(`Deploying to ${config.stage} environment`);
console.log(`Region: ${config.environment.region}`);
console.log(`Account: ${config.environment.account}`);
// Stack properties
const stackProps = {
    env: config.environment,
    description: `${config.stage} environment stack for serverless backend infrastructure`,
    terminationProtection: config.isProd
};
// Create IAM Stack (must be first)
const iamStack = new iam_stack_1.IamStack(app, namingHelper.getStackName(constants_1.STACK_NAMES.IAM), {
    ...stackProps,
    config,
    namingHelper,
    taggingHelper
});
// Create VPC Stack
const vpcStack = new vpc_stack_1.VpcStack(app, namingHelper.getStackName(constants_1.STACK_NAMES.VPC), {
    ...stackProps,
    config,
    namingHelper,
    taggingHelper
});
// Create Security Group Stack
const securityGroupStack = new security_group_stack_1.SecurityGroupStack(app, namingHelper.getStackName(constants_1.STACK_NAMES.SECURITY_GROUP), {
    ...stackProps,
    config,
    namingHelper,
    taggingHelper,
    vpc: vpcStack.vpc
});
// Create S3 Stack
const s3Stack = new s3_stack_1.S3Stack(app, namingHelper.getStackName(constants_1.STACK_NAMES.S3), {
    ...stackProps,
    config,
    namingHelper,
    taggingHelper
});
// Create Database Stack
const databaseStack = new database_stack_1.DatabaseStack(app, namingHelper.getStackName(constants_1.STACK_NAMES.DATABASE), {
    ...stackProps,
    config,
    namingHelper,
    taggingHelper,
    vpc: vpcStack.vpc,
    databaseSecurityGroups: [
        securityGroupStack.dbSshGroup,
        securityGroupStack.dbPrivateGroup
    ]
});
// Create EC2 Stack
const ec2Stack = new ec2_stack_1.Ec2Stack(app, namingHelper.getStackName(constants_1.STACK_NAMES.EC2), {
    ...stackProps,
    config,
    namingHelper,
    taggingHelper,
    vpc: vpcStack.vpc,
    publicSshSecurityGroup: securityGroupStack.publicSshGroup,
    bastionOutboundSecurityGroup: securityGroupStack.bastionOutboundGroup,
    natSecurityGroup: securityGroupStack.natGroup
});
// Create Lambda Stack
const lambdaStack = new lambda_stack_1.LambdaStack(app, namingHelper.getStackName(constants_1.STACK_NAMES.LAMBDA), {
    ...stackProps,
    config,
    namingHelper,
    taggingHelper,
    vpc: vpcStack.vpc,
    lambdaSecurityGroup: securityGroupStack.lambdaOutboundGroup,
    lambdaRole: iamStack.customLambdaCommonRole
});
// Create API Gateway Stack
const apiGatewayStack = new api_gateway_stack_1.ApiGatewayStack(app, namingHelper.getStackName(constants_1.STACK_NAMES.API_GATEWAY), {
    ...stackProps,
    config,
    namingHelper,
    taggingHelper,
    healthCheckFunction: lambdaStack.healthCheckFunction,
    apiGatewayRole: iamStack.customApiGatewayLogRole
});
// Set up dependencies
securityGroupStack.addDependency(vpcStack);
databaseStack.addDependency(securityGroupStack);
ec2Stack.addDependency(securityGroupStack);
lambdaStack.addDependency(securityGroupStack);
lambdaStack.addDependency(iamStack);
apiGatewayStack.addDependency(lambdaStack);
apiGatewayStack.addDependency(iamStack);
// Apply tags to the entire app
taggingHelper.applyTags(app, {
    Application: 'Serverless Backend',
    Version: '1.0.0',
    Repository: 'cdk-prj'
});
// Synthesize the app
app.synth();
//# sourceMappingURL=data:application/json;base64,